package xml

import xml.Sugar
import scala.collection.immutable.List
import scala.collection.mutable.ListBuffer

trait Test {
	def apply() = {
		test()
		if (actual == expected) true
		else {
			msg = s"$name: Expected '$expected', but was '$actual'"
			false
		}
	}
	def test(): Unit
	val expected: String
	val name: String
	var actual = ""
	var msg = ""
}

object SugarTest {
	def main(args: Array[String]) {
		val tests = List(
			testEmptyElement,
			testOneAttributeEmptyElement,
			testMultipleAttributesEmptyElement,
			testElementWithoutContent)
		val failed = new ListBuffer[Test]
		for (test <- tests) {
			if (test()) print(".")
			else {
				print("F")
				failed += test
			}
		}
		println()
		for (f <- failed) {
			println(f.msg)
		}
	}

	val testEmptyElement = new Test {
		val name = "Empty Element Test"
		val expected = "<xml/>"
		def test() = {
			actual = (<xml/>).toString
		}
	}

	val testOneAttributeEmptyElement = new Test {
		val name = "One attribute on empty element"
		val expected = "<xml lang=\"de\"/>"
		def test() = {
			actual = (<xml lang="de"/>).toString
		}
	}

	val testMultipleAttributesEmptyElement = new Test {
		val name = "Multiple attributes on empty element"
		val expected = "<xml id=\"foo\" lang=\"de\"/>"
		def test() = {
			actual = (<xml id="foo" lang="de"/>).toString
		}
	}

	val testElementWithoutContent = new Test {
		val name = "Element without content"
		val expected = "<xml></xml>"
		def test() = {
			actual = (<xml></xml>).toString
		}
	}
}
