package xml

import xml.Sugar
import scala.collection.immutable.List
import scala.collection.mutable.ListBuffer

trait Test {
	def apply() = {
		test()
		if (actual == expected) true
		else {
			msg = s"$name: Expected '$expected', but was '$actual'"
			false
		}
	}
	def test(): Unit
	val expected: String
	val name: String
	var actual = ""
	var msg = ""
}

object SugarTest {
	val tests = new ListBuffer[Test]

	def main(args: Array[String]) {
		addTests
		val failed = new ListBuffer[Test]
		for (test <- tests) {
			if (test()) print(".")
			else {
				print("F")
				failed += test
			}
		}
		println()
		println(s"Passed ${tests.length - failed.length}/${tests.length}")
		println(s"Last test added: ${tests.last.name}")
		println()
		for (f <- failed) {
			println(f.msg)
		}
	}

	def addTests {
		tests += new Test {
			val name = "Empty Element Test"
			val expected = "<xml/>"
			def test() = {
				actual = (<xml/>).toString
			}
		}

		tests += new Test {
			val name = "One attribute on empty element"
			val expected = "<xml lang=\"de\"/>"
			def test() = {
				actual = (<xml lang="de"/>).toString
			}
		}

		tests += new Test {
			val name = "Multiple attributes on empty element"
			val expected = "<xml id=\"foo\" lang=\"de\"/>"
			def test() = {
				actual = (<xml id="foo" lang="de"/>).toString
			}
		}

		tests += new Test {
			val name = "Element without content"
			val expected = "<xml></xml>"
			def test() = {
				actual = (<xml></xml>).toString
			}
		}

		tests += new Test {
			val name = "One attribute on element without content"
			val expected = "<xml id=\"foo\"></xml>"
			def test() = {
				actual = (<xml id="foo"></xml>).toString
			}
		}

		tests += new Test {
			val name = "Multiple attributes on element without content"
			val expected = "<xml lang=\"de\" id=\"foo\"></xml>"
			def test() = {
				actual = (<xml lang="de" id="foo"></xml>).toString
			}
		}

		tests += new Test {
			val name = "One nested element without attributes (no text)"
			val expected = "<xml><book></book></xml>"
			def test() = {
				actual = (<xml><book></book></xml>).toString
			}
		}

		tests += new Test {
			val name = "One nested empty element without attributes (no text)"
			val expected = "<xml><book/></xml>"
			def test() = {
				actual = (<xml><book/></xml>).toString
			}
		}

		tests += new Test {
			val name = "One nested element with attributes (no text)"
			val expected = "<xml><book author=\"Jon Doe\" title=\"Foo\"></book></xml>"
			def test() = {
				actual = (<xml><book author="Jon Doe" title="Foo"></book></xml>).toString
			}
		}

		tests += new Test {
			val name = "One nested text element"
			val expected = "<title>Foo Bar Baz</title>"
			def test() = {
				actual = (<title>Foo Bar Baz</title>).toString
			}
		}

		tests += new Test {
			val name = "Many children"
			val expected = "<books><book title=\"Foo\"/><book title=\"Baz\"/></books>"
			def test() = {
				actual = (<books><book title="Foo"/><book title="Baz"/></books>).toString
			}
		}

		tests += new Test {
			val name = "Many children with attributes"
			val expected = "<books id=\"bookStore\"><book title=\"Foo\"/><book title=\"Baz\"/></books>"
			def test() = {
				actual = (<books id="bookStore"><book title="Foo"/><book title="Baz"/></books>).toString
			}
		}

		tests += new Test {
			val name = "Simple HTML document"
			val expected = """<html><head><title>Simple Document</title></head><body><h1 id="heading">Hello World!</h1><p class="greeting">This is some Text in this document. Hope you enjoy.</p></body></html>"""
			def test() = {
				actual = (<!-- DOCTYPE html -->
				          <html>
				             <head>
				               <title>Simple Document</title>
				             </head>
				             <body>
				               <h1 id="heading">Hello World!</h1>
				               <p class="greeting">This is some Text in this
				                  document. Hope you enjoy.</p>
				             </body>
				          </html>).toString.replaceAll("\\s+", " ")
			}
		}
	}
}
